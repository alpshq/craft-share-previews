<?php

namespace alps\sharepreviews\controllers;

use alps\Module;
use alps\sharepreviews\models\ColorLayer;
use alps\sharepreviews\models\GradientLayer;
use alps\sharepreviews\models\Image;
use alps\sharepreviews\models\ImageLayer;
use alps\sharepreviews\models\TextLayer;
use alps\sharepreviews\SharePreviews;
use craft\elements\Entry;
use alps\sharepreviews\Config;
use alps\sharepreviews\services\FileHandler;
use alps\sharepreviews\services\FontFetcher;
use alps\sharepreviews\Plugin;
use alps\sharepreviews\services\Renderer;
use alps\youtube\Client;
use Craft;
use craft\web\Controller;
use League\OAuth2\Client\Provider\Google;
use yii\web\HttpException;

class PreviewController extends Controller
{
//    public $allowAnonymous = [
//        'actionIndex'
//    ];

    public $allowAnonymous = true;

    public function actionIndex(string $data)
    {
        $plugin = SharePreviews::getInstance();

        $layers = [
            new ColorLayer([
                'color' => [100,100,100],
            ]),
            new ColorLayer([
                'color' => [50,50,50],
                'padding' => 25,
            ]),
            new GradientLayer([
                'from' => [0,0,0],
                'to' => [255,255,255],
                'angle' => 45,
                'padding' => 50,
            ]),
            new ImageLayer([
                'path' => Craft::getAlias('@webroot/assets/images/testimonials-background.jpg'),
                'padding' => 75,
                'verticalAlign' => ImageLayer::VERTICAL_ALIGN_TOP,
                'horizontalAlign' => ImageLayer::HORIZONTAL_ALIGN_LEFT,
            ]),
            new TextLayer([
                'content' => 'This is an awesome text. Keep going! This is an awesome text. Keep going! This is an awesome text. Keep going! This is an awesome text. Keep going!',
                'padding' => 100,
                'color' => [255,0,0],
            ]),
        ];

        $image = new Image([
            'layers' => $layers,
//            'width' => 1200/2,
//            'height' => 630/2,
        ]);

        $image->render()->show('png', [
            'png_compression_level' => Renderer::PNG_COMPRESSION_LEVEL,
        ]);

        return;
        $config = new Config;
        $renderer = $plugin->renderer;
        $fileHandler = $plugin->fileHandler;

        $this->ensureFontIsCached($fileHandler);

        $config->applyEncodedData($data);

        $image = $renderer
            ->withConfig($config)
            ->render();

        $settings = $plugin->getSettings();

        if ($settings->disableImageCache !== true) {
            $fileHandler->saveImage($image, $data);
        }

        $image->show('png', [
            'png_compression_level' => Renderer::PNG_COMPRESSION_LEVEL,
        ]);
    }

    private function ensureFontIsCached(FileHandler $fileHandler): self
    {
        if ($fileHandler->fontExists('Apercu Pro', 600)) {
            return $this;
        }

        $contents = file_get_contents(__DIR__ . '/../fonts/ApercuPro-Bold.ttf');

        $fileHandler->saveFont('Apercu Pro', 600, $contents);

        return $this;
    }

    public function actionDraft()
    {
        $id = $this->request->getRequiredParam('id');

        $entry = Entry::find()->draftId($id)->one();

        if (!$entry) {
            throw new HttpException(404, 'Draft not found');
        }

        $plugin = SharePreviews::getInstance();

        $imagesService = $plugin->images;

        if ($imagesService->autoGeneratedPreviewImagesEnabled($entry) === false) {
            $url = $imagesService->getShareImagePreviewUrl($entry);

            if (!$url) {
                throw new HttpException(404, 'Draft not found');
            }

            return $this->redirect($url);
        }

        $this->ensureFontIsCached($plugin->fileHandler);

        $config = $imagesService->createConfigFromEntry($entry);

        $image = (new Renderer)
            ->withConfig($config)
            ->render();

        $image->show('png', [
            'png_compression_level' => Renderer::PNG_COMPRESSION_LEVEL,
        ]);
    }
}
